
SIur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000205c4  08001644  08001644  00011644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021c08  08021c08  00040004  2**0
                  CONTENTS
  4 .ARM          00000000  08021c08  08021c08  00040004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08021c08  08021c08  00040004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021c08  08021c08  00031c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021c0c  08021c0c  00031c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08021c10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08021c14  00040004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08021c14  00040030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e60  00000000  00000000  00040034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b44  00000000  00000000  00043e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  000449d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00010755  00000000  00000000  00044e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00002f11  00000000  00000000  000555ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0005ebd7  00000000  00000000  000584fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000b70d5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000450  00000000  00000000  000b7128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001334  00000000  00000000  000b7578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800162c 	.word	0x0800162c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800162c 	.word	0x0800162c

080001d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f003 0307 	and.w	r3, r3, #7
 80001e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ea:	68ba      	ldr	r2, [r7, #8]
 80001ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001f0:	4013      	ands	r3, r2
 80001f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	60d3      	str	r3, [r2, #12]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <__NVIC_GetPriorityGrouping+0x18>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	0a1b      	lsrs	r3, r3, #8
 8000226:	f003 0307 	and.w	r3, r3, #7
}
 800022a:	4618      	mov	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	2b00      	cmp	r3, #0
 8000248:	db0b      	blt.n	8000262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f003 021f 	and.w	r2, r3, #31
 8000250:	4907      	ldr	r1, [pc, #28]	; (8000270 <__NVIC_EnableIRQ+0x38>)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	095b      	lsrs	r3, r3, #5
 8000258:	2001      	movs	r0, #1
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e100 	.word	0xe000e100

08000274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db0a      	blt.n	800029e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <__NVIC_SetPriority+0x4c>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	440b      	add	r3, r1
 8000298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029c:	e00a      	b.n	80002b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4908      	ldr	r1, [pc, #32]	; (80002c4 <__NVIC_SetPriority+0x50>)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	3b04      	subs	r3, #4
 80002ac:	0112      	lsls	r2, r2, #4
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	440b      	add	r3, r1
 80002b2:	761a      	strb	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000e100 	.word	0xe000e100
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f1c3 0307 	rsb	r3, r3, #7
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	bf28      	it	cs
 80002e6:	2304      	movcs	r3, #4
 80002e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3304      	adds	r3, #4
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d902      	bls.n	80002f8 <NVIC_EncodePriority+0x30>
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3b03      	subs	r3, #3
 80002f6:	e000      	b.n	80002fa <NVIC_EncodePriority+0x32>
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	43da      	mvns	r2, r3
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	401a      	ands	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000310:	f04f 31ff 	mov.w	r1, #4294967295
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	43d9      	mvns	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	4313      	orrs	r3, r2
         );
}
 8000322:	4618      	mov	r0, r3
 8000324:	3724      	adds	r7, #36	; 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
	...

08000330 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <LL_RCC_HSI_Enable+0x1c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <LL_RCC_HSI_Enable+0x1c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800

08000350 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <LL_RCC_HSI_IsReady+0x20>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f003 0302 	and.w	r3, r3, #2
 800035c:	2b02      	cmp	r3, #2
 800035e:	bf0c      	ite	eq
 8000360:	2301      	moveq	r3, #1
 8000362:	2300      	movne	r3, #0
 8000364:	b2db      	uxtb	r3, r3
}
 8000366:	4618      	mov	r0, r3
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	40023800 	.word	0x40023800

08000374 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	4904      	ldr	r1, [pc, #16]	; (800039c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800038a:	4313      	orrs	r3, r2
 800038c:	600b      	str	r3, [r1, #0]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800

080003a0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_RCC_SetSysClkSource+0x24>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f023 0203 	bic.w	r2, r3, #3
 80003b0:	4904      	ldr	r1, [pc, #16]	; (80003c4 <LL_RCC_SetSysClkSource+0x24>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	608b      	str	r3, [r1, #8]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40023800 	.word	0x40023800

080003c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <LL_RCC_GetSysClkSource+0x18>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f003 030c 	and.w	r3, r3, #12
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40023800 	.word	0x40023800

080003e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003f4:	4904      	ldr	r1, [pc, #16]	; (8000408 <LL_RCC_SetAHBPrescaler+0x24>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	608b      	str	r3, [r1, #8]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40023800 	.word	0x40023800

0800040c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800041c:	4904      	ldr	r1, [pc, #16]	; (8000430 <LL_RCC_SetAPB1Prescaler+0x24>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	608b      	str	r3, [r1, #8]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800

08000434 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_SetAPB2Prescaler+0x24>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000444:	4904      	ldr	r1, [pc, #16]	; (8000458 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	608b      	str	r3, [r1, #8]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40023800 	.word	0x40023800

0800045c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <LL_RCC_SetTIMPrescaler+0x28>)
 8000466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800046a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800046e:	4905      	ldr	r1, [pc, #20]	; (8000484 <LL_RCC_SetTIMPrescaler+0x28>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4313      	orrs	r3, r2
 8000474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800

08000488 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_RCC_PLL_Enable+0x1c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <LL_RCC_PLL_Enable+0x1c>)
 8000492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40023800 	.word	0x40023800

080004a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <LL_RCC_PLL_IsReady+0x24>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80004b8:	bf0c      	ite	eq
 80004ba:	2301      	moveq	r3, #1
 80004bc:	2300      	movne	r3, #0
 80004be:	b2db      	uxtb	r3, r3
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40023800 	.word	0x40023800

080004d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80004e4:	4013      	ands	r3, r2
 80004e6:	68f9      	ldr	r1, [r7, #12]
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	4311      	orrs	r1, r2
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	0192      	lsls	r2, r2, #6
 80004f0:	430a      	orrs	r2, r1
 80004f2:	4908      	ldr	r1, [pc, #32]	; (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004f4:	4313      	orrs	r3, r2
 80004f6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000500:	4904      	ldr	r1, [pc, #16]	; (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	4313      	orrs	r3, r2
 8000506:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	40023800 	.word	0x40023800
 8000518:	ffbf8000 	.word	0xffbf8000

0800051c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40023800 	.word	0x40023800

0800054c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <LL_APB1_GRP1_EnableClock+0x2c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40023800 	.word	0x40023800

0800057c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000588:	4907      	ldr	r1, [pc, #28]	; (80005a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40023800 	.word	0x40023800

080005ac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <LL_FLASH_SetLatency+0x24>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f023 0207 	bic.w	r2, r3, #7
 80005bc:	4904      	ldr	r1, [pc, #16]	; (80005d0 <LL_FLASH_SetLatency+0x24>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	600b      	str	r3, [r1, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <LL_FLASH_GetLatency+0x18>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 0307 	and.w	r3, r3, #7
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40023c00 	.word	0x40023c00

080005f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000600:	4904      	ldr	r1, [pc, #16]	; (8000614 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4313      	orrs	r3, r2
 8000606:	600b      	str	r3, [r1, #0]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40007000 	.word	0x40007000

08000618 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f043 0201 	orr.w	r2, r3, #1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	601a      	str	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	431a      	orrs	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <LL_TIM_SetClockDivision>:
  *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
  *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	431a      	orrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6a1a      	ldr	r2, [r3, #32]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	431a      	orrs	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	621a      	str	r2, [r3, #32]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d01c      	beq.n	800072c <LL_TIM_OC_SetMode+0x4c>
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d017      	beq.n	8000728 <LL_TIM_OC_SetMode+0x48>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b10      	cmp	r3, #16
 80006fc:	d012      	beq.n	8000724 <LL_TIM_OC_SetMode+0x44>
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b40      	cmp	r3, #64	; 0x40
 8000702:	d00d      	beq.n	8000720 <LL_TIM_OC_SetMode+0x40>
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800070a:	d007      	beq.n	800071c <LL_TIM_OC_SetMode+0x3c>
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000712:	d101      	bne.n	8000718 <LL_TIM_OC_SetMode+0x38>
 8000714:	2305      	movs	r3, #5
 8000716:	e00a      	b.n	800072e <LL_TIM_OC_SetMode+0x4e>
 8000718:	2306      	movs	r3, #6
 800071a:	e008      	b.n	800072e <LL_TIM_OC_SetMode+0x4e>
 800071c:	2304      	movs	r3, #4
 800071e:	e006      	b.n	800072e <LL_TIM_OC_SetMode+0x4e>
 8000720:	2303      	movs	r3, #3
 8000722:	e004      	b.n	800072e <LL_TIM_OC_SetMode+0x4e>
 8000724:	2302      	movs	r3, #2
 8000726:	e002      	b.n	800072e <LL_TIM_OC_SetMode+0x4e>
 8000728:	2301      	movs	r3, #1
 800072a:	e000      	b.n	800072e <LL_TIM_OC_SetMode+0x4e>
 800072c:	2300      	movs	r3, #0
 800072e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3318      	adds	r3, #24
 8000734:	4619      	mov	r1, r3
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <LL_TIM_OC_SetMode+0x94>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	440b      	add	r3, r1
 800073e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	490c      	ldr	r1, [pc, #48]	; (8000778 <LL_TIM_OC_SetMode+0x98>)
 8000748:	5ccb      	ldrb	r3, [r1, r3]
 800074a:	4619      	mov	r1, r3
 800074c:	2373      	movs	r3, #115	; 0x73
 800074e:	408b      	lsls	r3, r1
 8000750:	43db      	mvns	r3, r3
 8000752:	401a      	ands	r2, r3
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <LL_TIM_OC_SetMode+0x98>)
 8000758:	5ccb      	ldrb	r3, [r1, r3]
 800075a:	4619      	mov	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	408b      	lsls	r3, r1
 8000760:	431a      	orrs	r2, r3
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	08021bf8 	.word	0x08021bf8
 8000778:	08021c00 	.word	0x08021c00

0800077c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	683a      	ldr	r2, [r7, #0]
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f06f 0201 	mvn.w	r2, #1
 80007e2:	611a      	str	r2, [r3, #16]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b01      	cmp	r3, #1
 8000802:	d101      	bne.n	8000808 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	f043 0201 	orr.w	r2, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60da      	str	r2, [r3, #12]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f043 0201 	orr.w	r2, r3, #1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	615a      	str	r2, [r3, #20]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	691a      	ldr	r2, [r3, #16]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	4013      	ands	r3, r2
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	bf0c      	ite	eq
 800086e:	2301      	moveq	r3, #1
 8000870:	2300      	movne	r3, #0
 8000872:	b2db      	uxtb	r3, r3
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	619a      	str	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	041a      	lsls	r2, r3, #16
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	619a      	str	r2, [r3, #24]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <delay_ms>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_ms(uint16_t delay)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	delay_ms_value = delay;
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <delay_ms+0x2c>)
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	8013      	strh	r3, [r2, #0]
	while(delay_ms_value);
 80008cc:	bf00      	nop
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <delay_ms+0x2c>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1fa      	bne.n	80008ce <delay_ms+0x12>
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000020 	.word	0x20000020

080008ec <scierwo_set>:

void scierwo_set(uint16_t setting)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH1(TIM1, setting);
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	4619      	mov	r1, r3
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <scierwo_set+0x1c>)
 80008fc:	f7ff ff3e 	bl	800077c <LL_TIM_OC_SetCompareCH1>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40010000 	.word	0x40010000

0800090c <wibruj_kogucie>:

void wibruj_kogucie()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH2(TIM1, 749);
 8000910:	f240 21ed 	movw	r1, #749	; 0x2ed
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <wibruj_kogucie+0x14>)
 8000916:	f7ff ff3f 	bl	8000798 <LL_TIM_OC_SetCompareCH2>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40010000 	.word	0x40010000

08000924 <kogucie_wibracje_stop>:
void kogucie_wibracje_stop()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH2(TIM1, 0);
 8000928:	2100      	movs	r1, #0
 800092a:	4802      	ldr	r0, [pc, #8]	; (8000934 <kogucie_wibracje_stop+0x10>)
 800092c:	f7ff ff34 	bl	8000798 <LL_TIM_OC_SetCompareCH2>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010000 	.word	0x40010000

08000938 <chujowe_oko_mam>:

void chujowe_oko_mam()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800093c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <chujowe_oko_mam+0x14>)
 8000942:	f7ff ffab 	bl	800089c <LL_GPIO_ResetOutputPin>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020400 	.word	0x40020400

08000950 <chujowe_oko_zamykam>:

void chujowe_oko_zamykam()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <chujowe_oko_zamykam+0x14>)
 800095a:	f7ff ff91 	bl	8000880 <LL_GPIO_SetOutputPin>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40020400 	.word	0x40020400

08000968 <kurczak_piej>:

void kurczak_piej(uint8_t ryk)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	LL_TIM_OC_SetCompareCH1(TIM4, ryk);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4619      	mov	r1, r3
 8000976:	4803      	ldr	r0, [pc, #12]	; (8000984 <kurczak_piej+0x1c>)
 8000978:	f7ff ff00 	bl	800077c <LL_TIM_OC_SetCompareCH1>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40000800 	.word	0x40000800

08000988 <czy_ma_nakurwiac>:

uint8_t czy_ma_nakurwiac()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	return !LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_12);
 800098c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <czy_ma_nakurwiac+0x20>)
 8000992:	f7ff ff60 	bl	8000856 <LL_GPIO_IsInputPinSet>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf0c      	ite	eq
 800099c:	2301      	moveq	r3, #1
 800099e:	2300      	movne	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40020400 	.word	0x40020400

080009ac <czy_kurczak_wkurwiony>:

uint8_t czy_kurczak_wkurwiony()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_9);
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <czy_kurczak_wkurwiony+0x18>)
 80009b6:	f7ff ff4e 	bl	8000856 <LL_GPIO_IsInputPinSet>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40020400 	.word	0x40020400

080009c8 <TIM1_TRG_COM_TIM11_IRQHandler>:


void TIM1_TRG_COM_TIM11_IRQHandler()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM11))
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 80009ce:	f7ff ff0f 	bl	80007f0 <LL_TIM_IsActiveFlag_UPDATE>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00e      	beq.n	80009f6 <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
	{
		if(delay_ms_value > 0)
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>
			delay_ms_value--;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	3b01      	subs	r3, #1
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80009ee:	801a      	strh	r2, [r3, #0]
		LL_TIM_ClearFlag_UPDATE(TIM11);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 80009f2:	f7ff feef 	bl	80007d4 <LL_TIM_ClearFlag_UPDATE>
	}

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40014800 	.word	0x40014800
 8000a00:	20000020 	.word	0x20000020

08000a04 <cisza_przed_wkurwem>:

void cisza_przed_wkurwem()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	delay_ms(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0c:	f7ff ff56 	bl	80008bc <delay_ms>
	chujowe_oko_mam();
 8000a10:	f7ff ff92 	bl	8000938 <chujowe_oko_mam>
	delay_ms(200);
 8000a14:	20c8      	movs	r0, #200	; 0xc8
 8000a16:	f7ff ff51 	bl	80008bc <delay_ms>
	chujowe_oko_zamykam();
 8000a1a:	f7ff ff99 	bl	8000950 <chujowe_oko_zamykam>
	delay_ms(200);
 8000a1e:	20c8      	movs	r0, #200	; 0xc8
 8000a20:	f7ff ff4c 	bl	80008bc <delay_ms>
	chujowe_oko_mam();
 8000a24:	f7ff ff88 	bl	8000938 <chujowe_oko_mam>
	delay_ms(200);
 8000a28:	20c8      	movs	r0, #200	; 0xc8
 8000a2a:	f7ff ff47 	bl	80008bc <delay_ms>
	chujowe_oko_zamykam();
 8000a2e:	f7ff ff8f 	bl	8000950 <chujowe_oko_zamykam>
	delay_ms(500);
 8000a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a36:	f7ff ff41 	bl	80008bc <delay_ms>
	chujowe_oko_mam();
 8000a3a:	f7ff ff7d 	bl	8000938 <chujowe_oko_mam>
	delay_ms(666);
 8000a3e:	f240 209a 	movw	r0, #666	; 0x29a
 8000a42:	f7ff ff3b 	bl	80008bc <delay_ms>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <TIM1_UP_TIM10_IRQHandler>:

volatile uint8_t tik_oka = 0;
volatile uint8_t mrugaj_flaga = 0;
void TIM1_UP_TIM10_IRQHandler()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM10))
 8000a50:	4830      	ldr	r0, [pc, #192]	; (8000b14 <TIM1_UP_TIM10_IRQHandler+0xc8>)
 8000a52:	f7ff fecd 	bl	80007f0 <LL_TIM_IsActiveFlag_UPDATE>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d059      	beq.n	8000b10 <TIM1_UP_TIM10_IRQHandler+0xc4>
	{
		if(czy_ma_nakurwiac())
 8000a5c:	f7ff ff94 	bl	8000988 <czy_ma_nakurwiac>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d04a      	beq.n	8000afc <TIM1_UP_TIM10_IRQHandler+0xb0>
		{
			if(czy_kurczak_wkurwiony())
 8000a66:	f7ff ffa1 	bl	80009ac <czy_kurczak_wkurwiony>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d028      	beq.n	8000ac2 <TIM1_UP_TIM10_IRQHandler+0x76>
			{
				if(tik_oka == 0)
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <TIM1_UP_TIM10_IRQHandler+0xcc>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d105      	bne.n	8000a86 <TIM1_UP_TIM10_IRQHandler+0x3a>
				{
					mrugaj_flaga = 1;
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
					tik_oka = 1;
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <TIM1_UP_TIM10_IRQHandler+0xcc>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
				}
				if(mrugaj_flaga == 0)
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d13c      	bne.n	8000b0a <TIM1_UP_TIM10_IRQHandler+0xbe>
				{
					wibruj_kogucie();
 8000a90:	f7ff ff3c 	bl	800090c <wibruj_kogucie>
					//chujowe_oko_mam();
					kurczak_piej(ryk_wkurw[pianie_index_wkurw]);
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff63 	bl	8000968 <kurczak_piej>
					pianie_index_wkurw = (pianie_index_wkurw + 1) % NUM_ELEMENTS_ANGRY;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	0893      	lsrs	r3, r2, #2
 8000aaa:	491f      	ldr	r1, [pc, #124]	; (8000b28 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8000aac:	fba1 1303 	umull	r1, r3, r1, r3
 8000ab0:	0b1b      	lsrs	r3, r3, #12
 8000ab2:	f64b 6174 	movw	r1, #48756	; 0xbe74
 8000ab6:	fb01 f303 	mul.w	r3, r1, r3
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e023      	b.n	8000b0a <TIM1_UP_TIM10_IRQHandler+0xbe>
				}
			}
			else
			{
				tik_oka = 0;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <TIM1_UP_TIM10_IRQHandler+0xcc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
				kogucie_wibracje_stop();
 8000ac8:	f7ff ff2c 	bl	8000924 <kogucie_wibracje_stop>
				chujowe_oko_zamykam();
 8000acc:	f7ff ff40 	bl	8000950 <chujowe_oko_zamykam>
				kurczak_piej(ryk_spokoj[pianie_index_spokoj]);
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8000ad6:	5cd3      	ldrb	r3, [r2, r3]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff45 	bl	8000968 <kurczak_piej>
				pianie_index_spokoj = (pianie_index_spokoj + 1) % NUM_ELEMENTS_TRANQUIL;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	0853      	lsrs	r3, r2, #1
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <TIM1_UP_TIM10_IRQHandler+0xe8>)
 8000ae8:	fba1 1303 	umull	r1, r3, r1, r3
 8000aec:	0bdb      	lsrs	r3, r3, #15
 8000aee:	4912      	ldr	r1, [pc, #72]	; (8000b38 <TIM1_UP_TIM10_IRQHandler+0xec>)
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e006      	b.n	8000b0a <TIM1_UP_TIM10_IRQHandler+0xbe>
			}
		}
		else
		{
			kurczak_piej(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff33 	bl	8000968 <kurczak_piej>
			kogucie_wibracje_stop();
 8000b02:	f7ff ff0f 	bl	8000924 <kogucie_wibracje_stop>
			chujowe_oko_zamykam();
 8000b06:	f7ff ff23 	bl	8000950 <chujowe_oko_zamykam>
		}
		LL_TIM_ClearFlag_UPDATE(TIM10);
 8000b0a:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM1_UP_TIM10_IRQHandler+0xc8>)
 8000b0c:	f7ff fe62 	bl	80007d4 <LL_TIM_ClearFlag_UPDATE>
	}
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40014400 	.word	0x40014400
 8000b18:	2000002c 	.word	0x2000002c
 8000b1c:	2000002d 	.word	0x2000002d
 8000b20:	20000028 	.word	0x20000028
 8000b24:	08015d84 	.word	0x08015d84
 8000b28:	5606c349 	.word	0x5606c349
 8000b2c:	20000024 	.word	0x20000024
 8000b30:	08001644 	.word	0x08001644
 8000b34:	c8447fef 	.word	0xc8447fef
 8000b38:	0001473e 	.word	0x0001473e

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b46:	f7ff fd19 	bl	800057c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b4a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b4e:	f7ff fcfd 	bl	800054c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b52:	2003      	movs	r0, #3
 8000b54:	f7ff fb3e 	bl	80001d4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000b58:	f7ff fb60 	bl	800021c <__NVIC_GetPriorityGrouping>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fbb0 	bl	80002c8 <NVIC_EncodePriority>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff fb80 	bl	8000274 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b74:	f000 f986 	bl	8000e84 <SystemClock_Config>
 // MX_TIM10_Init();
 // MX_GPIO_Init();
 // MX_TIM11_Init();
  /* USER CODE BEGIN 2 */
  //--------------------------TIM1-----------------------------------
  LL_GPIO_InitTypeDef gpio_init = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff fcf6 	bl	800057c <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fcc3 	bl	800051c <LL_AHB1_GRP1_EnableClock>

  LL_TIM_DeInit(TIM1);
 8000b96:	48b4      	ldr	r0, [pc, #720]	; (8000e68 <main+0x32c>)
 8000b98:	f000 fbf8 	bl	800138c <LL_TIM_DeInit>
  LL_TIM_SetPrescaler(TIM1, 1279);
 8000b9c:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8000ba0:	48b1      	ldr	r0, [pc, #708]	; (8000e68 <main+0x32c>)
 8000ba2:	f7ff fd6f 	bl	8000684 <LL_TIM_SetPrescaler>
  LL_TIM_SetCounterMode(TIM1, LL_TIM_COUNTERMODE_UP);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	48af      	ldr	r0, [pc, #700]	; (8000e68 <main+0x32c>)
 8000baa:	f7ff fd45 	bl	8000638 <LL_TIM_SetCounterMode>
  LL_TIM_SetAutoReload(TIM1, 999);
 8000bae:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000bb2:	48ad      	ldr	r0, [pc, #692]	; (8000e68 <main+0x32c>)
 8000bb4:	f7ff fd74 	bl	80006a0 <LL_TIM_SetAutoReload>
  LL_TIM_SetClockDivision(TIM1, LL_TIM_CLOCKDIVISION_DIV1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	48ab      	ldr	r0, [pc, #684]	; (8000e68 <main+0x32c>)
 8000bbc:	f7ff fd4f 	bl	800065e <LL_TIM_SetClockDivision>
  LL_TIM_GenerateEvent_UPDATE(TIM1);
 8000bc0:	48a9      	ldr	r0, [pc, #676]	; (8000e68 <main+0x32c>)
 8000bc2:	f7ff fe38 	bl	8000836 <LL_TIM_GenerateEvent_UPDATE>

  LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8000bc6:	2260      	movs	r2, #96	; 0x60
 8000bc8:	2101      	movs	r1, #1
 8000bca:	48a7      	ldr	r0, [pc, #668]	; (8000e68 <main+0x32c>)
 8000bcc:	f7ff fd88 	bl	80006e0 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetCompareCH1(TIM1, 0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	48a5      	ldr	r0, [pc, #660]	; (8000e68 <main+0x32c>)
 8000bd4:	f7ff fdd2 	bl	800077c <LL_TIM_OC_SetCompareCH1>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	48a3      	ldr	r0, [pc, #652]	; (8000e68 <main+0x32c>)
 8000bdc:	f7ff fd6e 	bl	80006bc <LL_TIM_CC_EnableChannel>

  LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 8000be0:	2260      	movs	r2, #96	; 0x60
 8000be2:	2110      	movs	r1, #16
 8000be4:	48a0      	ldr	r0, [pc, #640]	; (8000e68 <main+0x32c>)
 8000be6:	f7ff fd7b 	bl	80006e0 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetCompareCH2(TIM1, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	489e      	ldr	r0, [pc, #632]	; (8000e68 <main+0x32c>)
 8000bee:	f7ff fdd3 	bl	8000798 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	489c      	ldr	r0, [pc, #624]	; (8000e68 <main+0x32c>)
 8000bf6:	f7ff fd61 	bl	80006bc <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableAllOutputs(TIM1);
 8000bfa:	489b      	ldr	r0, [pc, #620]	; (8000e68 <main+0x32c>)
 8000bfc:	f7ff fdda 	bl	80007b4 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8000c00:	4899      	ldr	r0, [pc, #612]	; (8000e68 <main+0x32c>)
 8000c02:	f7ff fd09 	bl	8000618 <LL_TIM_EnableCounter>

  gpio_init.Pin = LL_GPIO_PIN_8;
 8000c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0a:	617b      	str	r3, [r7, #20]
  gpio_init.Pull = LL_GPIO_PULL_NO;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  gpio_init.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
  gpio_init.Alternate = LL_GPIO_AF_1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  LL_GPIO_Init(GPIOA, &gpio_init);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4892      	ldr	r0, [pc, #584]	; (8000e6c <main+0x330>)
 8000c24:	f000 fab8 	bl	8001198 <LL_GPIO_Init>

  gpio_init.Pin = LL_GPIO_PIN_9;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	617b      	str	r3, [r7, #20]
  gpio_init.Pull = LL_GPIO_PULL_NO;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  gpio_init.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
  gpio_init.Alternate = LL_GPIO_AF_1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  LL_GPIO_Init(GPIOA, &gpio_init);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4889      	ldr	r0, [pc, #548]	; (8000e6c <main+0x330>)
 8000c46:	f000 faa7 	bl	8001198 <LL_GPIO_Init>

//--------------------------TIM4-----------------------------------
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8000c4a:	2004      	movs	r0, #4
 8000c4c:	f7ff fc7e 	bl	800054c <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff fc63 	bl	800051c <LL_AHB1_GRP1_EnableClock>

  LL_TIM_DeInit(TIM4);
 8000c56:	4886      	ldr	r0, [pc, #536]	; (8000e70 <main+0x334>)
 8000c58:	f000 fb98 	bl	800138c <LL_TIM_DeInit>
  LL_TIM_SetPrescaler(TIM4, 0);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4884      	ldr	r0, [pc, #528]	; (8000e70 <main+0x334>)
 8000c60:	f7ff fd10 	bl	8000684 <LL_TIM_SetPrescaler>
  LL_TIM_SetCounterMode(TIM4, LL_TIM_COUNTERMODE_UP);
 8000c64:	2100      	movs	r1, #0
 8000c66:	4882      	ldr	r0, [pc, #520]	; (8000e70 <main+0x334>)
 8000c68:	f7ff fce6 	bl	8000638 <LL_TIM_SetCounterMode>
  LL_TIM_SetAutoReload(TIM4, 255);
 8000c6c:	21ff      	movs	r1, #255	; 0xff
 8000c6e:	4880      	ldr	r0, [pc, #512]	; (8000e70 <main+0x334>)
 8000c70:	f7ff fd16 	bl	80006a0 <LL_TIM_SetAutoReload>
  LL_TIM_SetClockDivision(TIM4, LL_TIM_CLOCKDIVISION_DIV1);
 8000c74:	2100      	movs	r1, #0
 8000c76:	487e      	ldr	r0, [pc, #504]	; (8000e70 <main+0x334>)
 8000c78:	f7ff fcf1 	bl	800065e <LL_TIM_SetClockDivision>
  LL_TIM_GenerateEvent_UPDATE(TIM4);
 8000c7c:	487c      	ldr	r0, [pc, #496]	; (8000e70 <main+0x334>)
 8000c7e:	f7ff fdda 	bl	8000836 <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8000c82:	2260      	movs	r2, #96	; 0x60
 8000c84:	2101      	movs	r1, #1
 8000c86:	487a      	ldr	r0, [pc, #488]	; (8000e70 <main+0x334>)
 8000c88:	f7ff fd2a 	bl	80006e0 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4878      	ldr	r0, [pc, #480]	; (8000e70 <main+0x334>)
 8000c90:	f7ff fd74 	bl	800077c <LL_TIM_OC_SetCompareCH1>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 8000c94:	2101      	movs	r1, #1
 8000c96:	4876      	ldr	r0, [pc, #472]	; (8000e70 <main+0x334>)
 8000c98:	f7ff fd10 	bl	80006bc <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableAllOutputs(TIM4);
 8000c9c:	4874      	ldr	r0, [pc, #464]	; (8000e70 <main+0x334>)
 8000c9e:	f7ff fd89 	bl	80007b4 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM4);
 8000ca2:	4873      	ldr	r0, [pc, #460]	; (8000e70 <main+0x334>)
 8000ca4:	f7ff fcb8 	bl	8000618 <LL_TIM_EnableCounter>

  gpio_init.Pin = LL_GPIO_PIN_6;
 8000ca8:	2340      	movs	r3, #64	; 0x40
 8000caa:	617b      	str	r3, [r7, #20]
  gpio_init.Pull = LL_GPIO_PULL_NO;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
  gpio_init.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
  gpio_init.Alternate = LL_GPIO_AF_2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28

  LL_GPIO_Init(GPIOB, &gpio_init);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	486c      	ldr	r0, [pc, #432]	; (8000e74 <main+0x338>)
 8000cc4:	f000 fa68 	bl	8001198 <LL_GPIO_Init>

//-------------------TIM11 + TIM10------------------------------------------
  LL_TIM_InitTypeDef tim_init = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 8000cd6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cda:	f7ff fc4f 	bl	800057c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8000cde:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ce2:	f7ff fc4b 	bl	800057c <LL_APB2_GRP1_EnableClock>

  tim_init.Prescaler = 7;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	803b      	strh	r3, [r7, #0]
  tim_init.Autoreload = 999;
 8000cea:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000cee:	60bb      	str	r3, [r7, #8]
  tim_init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  tim_init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]

  LL_TIM_Init(TIM10, &tim_init);
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	485e      	ldr	r0, [pc, #376]	; (8000e78 <main+0x33c>)
 8000cfe:	f000 fbbf 	bl	8001480 <LL_TIM_Init>
  tim_init.Prescaler = 63;
 8000d02:	233f      	movs	r3, #63	; 0x3f
 8000d04:	803b      	strh	r3, [r7, #0]
  tim_init.Autoreload = 999;
 8000d06:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d0a:	60bb      	str	r3, [r7, #8]
  tim_init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  tim_init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  LL_TIM_Init(TIM11, &tim_init);
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4858      	ldr	r0, [pc, #352]	; (8000e7c <main+0x340>)
 8000d1a:	f000 fbb1 	bl	8001480 <LL_TIM_Init>

  LL_TIM_EnableIT_UPDATE(TIM10);
 8000d1e:	4856      	ldr	r0, [pc, #344]	; (8000e78 <main+0x33c>)
 8000d20:	f7ff fd79 	bl	8000816 <LL_TIM_EnableIT_UPDATE>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 8);
 8000d24:	2108      	movs	r1, #8
 8000d26:	2019      	movs	r0, #25
 8000d28:	f7ff faa4 	bl	8000274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d2c:	2019      	movs	r0, #25
 8000d2e:	f7ff fa83 	bl	8000238 <__NVIC_EnableIRQ>

  LL_TIM_EnableIT_UPDATE(TIM11);
 8000d32:	4852      	ldr	r0, [pc, #328]	; (8000e7c <main+0x340>)
 8000d34:	f7ff fd6f 	bl	8000816 <LL_TIM_EnableIT_UPDATE>
  NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 8);
 8000d38:	2108      	movs	r1, #8
 8000d3a:	201a      	movs	r0, #26
 8000d3c:	f7ff fa9a 	bl	8000274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d40:	201a      	movs	r0, #26
 8000d42:	f7ff fa79 	bl	8000238 <__NVIC_EnableIRQ>

  LL_TIM_EnableCounter(TIM10);
 8000d46:	484c      	ldr	r0, [pc, #304]	; (8000e78 <main+0x33c>)
 8000d48:	f7ff fc66 	bl	8000618 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM11);
 8000d4c:	484b      	ldr	r0, [pc, #300]	; (8000e7c <main+0x340>)
 8000d4e:	f7ff fc63 	bl	8000618 <LL_TIM_EnableCounter>
//----------------PB12 + PB9 + PB13----------------------------
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f7ff fbe2 	bl	800051c <LL_AHB1_GRP1_EnableClock>

  gpio_init.Mode = LL_GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  gpio_init.Pull = LL_GPIO_PULL_NO;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init.Pin = LL_GPIO_PIN_9;
 8000d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d64:	617b      	str	r3, [r7, #20]
  gpio_init.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]

  LL_GPIO_Init(GPIOB, &gpio_init);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4840      	ldr	r0, [pc, #256]	; (8000e74 <main+0x338>)
 8000d72:	f000 fa11 	bl	8001198 <LL_GPIO_Init>

  gpio_init.Pin = LL_GPIO_PIN_12;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	617b      	str	r3, [r7, #20]
  gpio_init.Pull = LL_GPIO_PULL_UP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24

  LL_GPIO_Init(GPIOB, &gpio_init);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	483b      	ldr	r0, [pc, #236]	; (8000e74 <main+0x338>)
 8000d88:	f000 fa06 	bl	8001198 <LL_GPIO_Init>

  gpio_init.Mode = LL_GPIO_MODE_OUTPUT;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  gpio_init.Pin = LL_GPIO_PIN_13;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	617b      	str	r3, [r7, #20]

  LL_GPIO_Init(GPIOB, &gpio_init);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4835      	ldr	r0, [pc, #212]	; (8000e74 <main+0x338>)
 8000d9e:	f000 f9fb 	bl	8001198 <LL_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t przerwa_w_fapaniu = 15;
 8000da2:	230f      	movs	r3, #15
 8000da4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t solidry_nakurw = przerwa_w_fapaniu / 2;
 8000da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  while (1)
  {
	uint16_t setting = 50;
 8000db2:	2332      	movs	r3, #50	; 0x32
 8000db4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	while(setting < 80)
 8000db6:	e027      	b.n	8000e08 <main+0x2cc>
	{
		if(mrugaj_flaga)
 8000db8:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <main+0x344>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <main+0x290>
		{
			cisza_przed_wkurwem();
 8000dc2:	f7ff fe1f 	bl	8000a04 <cisza_przed_wkurwem>
			mrugaj_flaga = 0;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <main+0x344>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
		}
		if(czy_ma_nakurwiac())
 8000dcc:	f7ff fddc 	bl	8000988 <czy_ma_nakurwiac>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <main+0x2a8>
		{
			scierwo_set(setting);
 8000dd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd87 	bl	80008ec <scierwo_set>
			setting += 1;
 8000dde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000de0:	3301      	adds	r3, #1
 8000de2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}

		if(czy_kurczak_wkurwiony())
 8000de4:	f7ff fde2 	bl	80009ac <czy_kurczak_wkurwiony>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <main+0x2c0>
			delay_ms(solidry_nakurw);
 8000dee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fd61 	bl	80008bc <delay_ms>
 8000dfa:	e005      	b.n	8000e08 <main+0x2cc>
		else
			delay_ms(przerwa_w_fapaniu);
 8000dfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fd5a 	bl	80008bc <delay_ms>
	while(setting < 80)
 8000e08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e0a:	2b4f      	cmp	r3, #79	; 0x4f
 8000e0c:	d9d4      	bls.n	8000db8 <main+0x27c>
	}
	while(setting > 50)
 8000e0e:	e027      	b.n	8000e60 <main+0x324>
	{
		if(mrugaj_flaga)
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <main+0x344>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <main+0x2e8>
		{
			cisza_przed_wkurwem();
 8000e1a:	f7ff fdf3 	bl	8000a04 <cisza_przed_wkurwem>
			mrugaj_flaga = 0;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <main+0x344>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
		}
		if(czy_ma_nakurwiac())
 8000e24:	f7ff fdb0 	bl	8000988 <czy_ma_nakurwiac>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <main+0x300>
		{
			scierwo_set(setting);
 8000e2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fd5b 	bl	80008ec <scierwo_set>
			setting -= 1;
 8000e36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		if(czy_kurczak_wkurwiony())
 8000e3c:	f7ff fdb6 	bl	80009ac <czy_kurczak_wkurwiony>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <main+0x318>
			delay_ms(solidry_nakurw);
 8000e46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fd35 	bl	80008bc <delay_ms>
 8000e52:	e005      	b.n	8000e60 <main+0x324>
		else
			delay_ms(przerwa_w_fapaniu);
 8000e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fd2e 	bl	80008bc <delay_ms>
	while(setting > 50)
 8000e60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e62:	2b32      	cmp	r3, #50	; 0x32
 8000e64:	d8d4      	bhi.n	8000e10 <main+0x2d4>
  {
 8000e66:	e7a4      	b.n	8000db2 <main+0x276>
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40000800 	.word	0x40000800
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40014400 	.word	0x40014400
 8000e7c:	40014800 	.word	0x40014800
 8000e80:	2000002d 	.word	0x2000002d

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f7ff fb8f 	bl	80005ac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000e8e:	bf00      	nop
 8000e90:	f7ff fba0 	bl	80005d4 <LL_FLASH_GetLatency>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d1fa      	bne.n	8000e90 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000e9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e9e:	f7ff fba7 	bl	80005f0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000ea2:	2010      	movs	r0, #16
 8000ea4:	f7ff fa66 	bl	8000374 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000ea8:	f7ff fa42 	bl	8000330 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000eac:	bf00      	nop
 8000eae:	f7ff fa4f 	bl	8000350 <LL_RCC_HSI_IsReady>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d1fa      	bne.n	8000eae <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 64, LL_RCC_PLLP_DIV_2);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff fb06 	bl	80004d0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000ec4:	f7ff fae0 	bl	8000488 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000ec8:	bf00      	nop
 8000eca:	f7ff faed 	bl	80004a8 <LL_RCC_PLL_IsReady>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d1fa      	bne.n	8000eca <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff fa85 	bl	80003e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000eda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ede:	f7ff fa95 	bl	800040c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000ee2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ee6:	f7ff faa5 	bl	8000434 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff fa58 	bl	80003a0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ef0:	bf00      	nop
 8000ef2:	f7ff fa69 	bl	80003c8 <LL_RCC_GetSysClkSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d1fa      	bne.n	8000ef2 <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(64000000);
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <SystemClock_Config+0x90>)
 8000efe:	f000 fb53 	bl	80015a8 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <SystemClock_Config+0x90>)
 8000f04:	f000 fb5e 	bl	80015c4 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff faa7 	bl	800045c <LL_RCC_SetTIMPrescaler>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	03d09000 	.word	0x03d09000

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f000 fb3b 	bl	80015e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fde5 	bl	8000b3c <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000f80:	08021c10 	.word	0x08021c10
  ldr r2, =_sbss
 8000f84:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000f88:	20000030 	.word	0x20000030

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>

08000f8e <LL_GPIO_SetPinMode>:
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b089      	sub	sp, #36	; 0x24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	61bb      	str	r3, [r7, #24]
  return result;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	fab3 f383 	clz	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	3724      	adds	r7, #36	; 0x24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_GPIO_SetPinOutputType>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	401a      	ands	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	fb01 f303 	mul.w	r3, r1, r3
 800100a:	431a      	orrs	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	605a      	str	r2, [r3, #4]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_GPIO_SetPinSpeed>:
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	613b      	str	r3, [r7, #16]
  return result;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2103      	movs	r1, #3
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	401a      	ands	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	61bb      	str	r3, [r7, #24]
  return result;
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	431a      	orrs	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	609a      	str	r2, [r3, #8]
}
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_GPIO_SetPinPull>:
{
 800107a:	b480      	push	{r7}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	613b      	str	r3, [r7, #16]
  return result;
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2103      	movs	r1, #3
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	61bb      	str	r3, [r7, #24]
  return result;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	431a      	orrs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	60da      	str	r2, [r3, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3724      	adds	r7, #36	; 0x24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_GPIO_SetAFPin_0_7>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	613b      	str	r3, [r7, #16]
  return result;
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	210f      	movs	r1, #15
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	61bb      	str	r3, [r7, #24]
  return result;
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	431a      	orrs	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	621a      	str	r2, [r3, #32]
}
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_GPIO_SetAFPin_8_15>:
{
 8001136:	b480      	push	{r7}
 8001138:	b089      	sub	sp, #36	; 0x24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	613b      	str	r3, [r7, #16]
  return result;
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	210f      	movs	r1, #15
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	61bb      	str	r3, [r7, #24]
  return result;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800118c:	bf00      	nop
 800118e:	3724      	adds	r7, #36	; 0x24
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	613b      	str	r3, [r7, #16]
  return result;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80011c2:	e050      	b.n	8001266 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2101      	movs	r1, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d042      	beq.n	8001260 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d003      	beq.n	80011ea <LL_GPIO_Init+0x52>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d10d      	bne.n	8001206 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	461a      	mov	r2, r3
 80011f0:	69b9      	ldr	r1, [r7, #24]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff12 	bl	800101c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	461a      	mov	r2, r3
 80011fe:	69b9      	ldr	r1, [r7, #24]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff fef3 	bl	8000fec <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	461a      	mov	r2, r3
 800120c:	69b9      	ldr	r1, [r7, #24]
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff33 	bl	800107a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d11a      	bne.n	8001252 <LL_GPIO_Init+0xba>
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	60bb      	str	r3, [r7, #8]
  return result;
 8001228:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b07      	cmp	r3, #7
 8001232:	d807      	bhi.n	8001244 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	461a      	mov	r2, r3
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff4b 	bl	80010d8 <LL_GPIO_SetAFPin_0_7>
 8001242:	e006      	b.n	8001252 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	461a      	mov	r2, r3
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff72 	bl	8001136 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	461a      	mov	r2, r3
 8001258:	69b9      	ldr	r1, [r7, #24]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe97 	bl	8000f8e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3301      	adds	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1a7      	bne.n	80011c4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <LL_TIM_SetPrescaler>:
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_TIM_SetAutoReload>:
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_TIM_SetRepetitionCounter>:
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_TIM_GenerateEvent_UPDATE>:
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	615a      	str	r2, [r3, #20]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <LL_APB1_GRP1_ForceReset>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <LL_APB1_GRP1_ForceReset+0x20>)
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	4904      	ldr	r1, [pc, #16]	; (8001314 <LL_APB1_GRP1_ForceReset+0x20>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4313      	orrs	r3, r2
 8001306:	620b      	str	r3, [r1, #32]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40023800 	.word	0x40023800

08001318 <LL_APB1_GRP1_ReleaseReset>:
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <LL_APB1_GRP1_ReleaseReset+0x24>)
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	43db      	mvns	r3, r3
 8001328:	4904      	ldr	r1, [pc, #16]	; (800133c <LL_APB1_GRP1_ReleaseReset+0x24>)
 800132a:	4013      	ands	r3, r2
 800132c:	620b      	str	r3, [r1, #32]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <LL_APB2_GRP1_ForceReset+0x20>)
 800134a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <LL_APB2_GRP1_ForceReset+0x20>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40023800 	.word	0x40023800

08001364 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <LL_APB2_GRP1_ReleaseReset+0x24>)
 800136e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	43db      	mvns	r3, r3
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8001376:	4013      	ands	r3, r2
 8001378:	624b      	str	r3, [r1, #36]	; 0x24
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <LL_TIM_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: invalid TIMx instance
  */
ErrorStatus LL_TIM_DeInit(TIM_TypeDef *TIMx)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  ErrorStatus result = SUCCESS;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));

  if (TIMx == TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <LL_TIM_DeInit+0xd8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d106      	bne.n	80013ae <LL_TIM_DeInit+0x22>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ffcd 	bl	8001340 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff ffdc 	bl	8001364 <LL_APB2_GRP1_ReleaseReset>
 80013ac:	e054      	b.n	8001458 <LL_TIM_DeInit+0xcc>
  }
#if defined(TIM2)
  else if (TIMx == TIM2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b4:	d106      	bne.n	80013c4 <LL_TIM_DeInit+0x38>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff ff9c 	bl	80012f4 <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff ffab 	bl	8001318 <LL_APB1_GRP1_ReleaseReset>
 80013c2:	e049      	b.n	8001458 <LL_TIM_DeInit+0xcc>
  }
#endif /* TIM2 */
#if defined(TIM3)
  else if (TIMx == TIM3)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a28      	ldr	r2, [pc, #160]	; (8001468 <LL_TIM_DeInit+0xdc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d106      	bne.n	80013da <LL_TIM_DeInit+0x4e>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM3);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7ff ff91 	bl	80012f4 <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM3);
 80013d2:	2002      	movs	r0, #2
 80013d4:	f7ff ffa0 	bl	8001318 <LL_APB1_GRP1_ReleaseReset>
 80013d8:	e03e      	b.n	8001458 <LL_TIM_DeInit+0xcc>
  }
#endif /* TIM3 */
#if defined(TIM4)
  else if (TIMx == TIM4)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <LL_TIM_DeInit+0xe0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d106      	bne.n	80013f0 <LL_TIM_DeInit+0x64>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM4);
 80013e2:	2004      	movs	r0, #4
 80013e4:	f7ff ff86 	bl	80012f4 <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM4);
 80013e8:	2004      	movs	r0, #4
 80013ea:	f7ff ff95 	bl	8001318 <LL_APB1_GRP1_ReleaseReset>
 80013ee:	e033      	b.n	8001458 <LL_TIM_DeInit+0xcc>
  }
#endif /* TIM4 */
#if defined(TIM5)
  else if (TIMx == TIM5)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <LL_TIM_DeInit+0xe4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d106      	bne.n	8001406 <LL_TIM_DeInit+0x7a>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM5);
 80013f8:	2008      	movs	r0, #8
 80013fa:	f7ff ff7b 	bl	80012f4 <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM5);
 80013fe:	2008      	movs	r0, #8
 8001400:	f7ff ff8a 	bl	8001318 <LL_APB1_GRP1_ReleaseReset>
 8001404:	e028      	b.n	8001458 <LL_TIM_DeInit+0xcc>
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM8);
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM8);
  }
#endif /* TIM8 */
#if defined(TIM9)
  else if (TIMx == TIM9)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <LL_TIM_DeInit+0xe8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d108      	bne.n	8001420 <LL_TIM_DeInit+0x94>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM9);
 800140e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001412:	f7ff ff95 	bl	8001340 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM9);
 8001416:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800141a:	f7ff ffa3 	bl	8001364 <LL_APB2_GRP1_ReleaseReset>
 800141e:	e01b      	b.n	8001458 <LL_TIM_DeInit+0xcc>
  }
#endif /* TIM9 */
#if defined(TIM10)
  else if (TIMx == TIM10)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <LL_TIM_DeInit+0xec>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d108      	bne.n	800143a <LL_TIM_DeInit+0xae>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM10);
 8001428:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800142c:	f7ff ff88 	bl	8001340 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM10);
 8001430:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001434:	f7ff ff96 	bl	8001364 <LL_APB2_GRP1_ReleaseReset>
 8001438:	e00e      	b.n	8001458 <LL_TIM_DeInit+0xcc>
  }
#endif /* TIM10 */
#if defined(TIM11)
  else if (TIMx == TIM11)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <LL_TIM_DeInit+0xf0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d108      	bne.n	8001454 <LL_TIM_DeInit+0xc8>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM11);
 8001442:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001446:	f7ff ff7b 	bl	8001340 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM11);
 800144a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800144e:	f7ff ff89 	bl	8001364 <LL_APB2_GRP1_ReleaseReset>
 8001452:	e001      	b.n	8001458 <LL_TIM_DeInit+0xcc>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM14);
  }
#endif /* TIM14 */
  else
  {
    result = ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010000 	.word	0x40010000
 8001468:	40000400 	.word	0x40000400
 800146c:	40000800 	.word	0x40000800
 8001470:	40000c00 	.word	0x40000c00
 8001474:	40014000 	.word	0x40014000
 8001478:	40014400 	.word	0x40014400
 800147c:	40014800 	.word	0x40014800

08001480 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a31      	ldr	r2, [pc, #196]	; (8001558 <LL_TIM_Init+0xd8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00f      	beq.n	80014b8 <LL_TIM_Init+0x38>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149e:	d00b      	beq.n	80014b8 <LL_TIM_Init+0x38>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <LL_TIM_Init+0xdc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <LL_TIM_Init+0x38>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <LL_TIM_Init+0xe0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d003      	beq.n	80014b8 <LL_TIM_Init+0x38>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <LL_TIM_Init+0xe4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d106      	bne.n	80014c6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <LL_TIM_Init+0xd8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01b      	beq.n	8001506 <LL_TIM_Init+0x86>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d017      	beq.n	8001506 <LL_TIM_Init+0x86>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a20      	ldr	r2, [pc, #128]	; (800155c <LL_TIM_Init+0xdc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <LL_TIM_Init+0x86>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1f      	ldr	r2, [pc, #124]	; (8001560 <LL_TIM_Init+0xe0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00f      	beq.n	8001506 <LL_TIM_Init+0x86>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <LL_TIM_Init+0xe4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00b      	beq.n	8001506 <LL_TIM_Init+0x86>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <LL_TIM_Init+0xe8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <LL_TIM_Init+0x86>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1c      	ldr	r2, [pc, #112]	; (800156c <LL_TIM_Init+0xec>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d003      	beq.n	8001506 <LL_TIM_Init+0x86>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <LL_TIM_Init+0xf0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d106      	bne.n	8001514 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4619      	mov	r1, r3
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff feba 	bl	800129a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fea6 	bl	800127e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <LL_TIM_Init+0xd8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d105      	bne.n	8001546 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff feb8 	bl	80012b6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fec3 	bl	80012d2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40010000 	.word	0x40010000
 800155c:	40000400 	.word	0x40000400
 8001560:	40000800 	.word	0x40000800
 8001564:	40000c00 	.word	0x40000c00
 8001568:	40014000 	.word	0x40014000
 800156c:	40014400 	.word	0x40014400
 8001570:	40014800 	.word	0x40014800

08001574 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <LL_InitTick+0x30>)
 8001588:	3b01      	subs	r3, #1
 800158a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <LL_InitTick+0x30>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <LL_InitTick+0x30>)
 8001594:	2205      	movs	r2, #5
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80015b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ffdd 	bl	8001574 <LL_InitTick>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <LL_SetSystemCoreClock+0x1c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000000 	.word	0x20000000

080015e4 <__libc_init_array>:
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	4d0d      	ldr	r5, [pc, #52]	; (800161c <__libc_init_array+0x38>)
 80015e8:	4c0d      	ldr	r4, [pc, #52]	; (8001620 <__libc_init_array+0x3c>)
 80015ea:	1b64      	subs	r4, r4, r5
 80015ec:	10a4      	asrs	r4, r4, #2
 80015ee:	2600      	movs	r6, #0
 80015f0:	42a6      	cmp	r6, r4
 80015f2:	d109      	bne.n	8001608 <__libc_init_array+0x24>
 80015f4:	4d0b      	ldr	r5, [pc, #44]	; (8001624 <__libc_init_array+0x40>)
 80015f6:	4c0c      	ldr	r4, [pc, #48]	; (8001628 <__libc_init_array+0x44>)
 80015f8:	f000 f818 	bl	800162c <_init>
 80015fc:	1b64      	subs	r4, r4, r5
 80015fe:	10a4      	asrs	r4, r4, #2
 8001600:	2600      	movs	r6, #0
 8001602:	42a6      	cmp	r6, r4
 8001604:	d105      	bne.n	8001612 <__libc_init_array+0x2e>
 8001606:	bd70      	pop	{r4, r5, r6, pc}
 8001608:	f855 3b04 	ldr.w	r3, [r5], #4
 800160c:	4798      	blx	r3
 800160e:	3601      	adds	r6, #1
 8001610:	e7ee      	b.n	80015f0 <__libc_init_array+0xc>
 8001612:	f855 3b04 	ldr.w	r3, [r5], #4
 8001616:	4798      	blx	r3
 8001618:	3601      	adds	r6, #1
 800161a:	e7f2      	b.n	8001602 <__libc_init_array+0x1e>
 800161c:	08021c08 	.word	0x08021c08
 8001620:	08021c08 	.word	0x08021c08
 8001624:	08021c08 	.word	0x08021c08
 8001628:	08021c0c 	.word	0x08021c0c

0800162c <_init>:
 800162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162e:	bf00      	nop
 8001630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001632:	bc08      	pop	{r3}
 8001634:	469e      	mov	lr, r3
 8001636:	4770      	bx	lr

08001638 <_fini>:
 8001638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163a:	bf00      	nop
 800163c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163e:	bc08      	pop	{r3}
 8001640:	469e      	mov	lr, r3
 8001642:	4770      	bx	lr
